<style>
  .2up-carousel {
    display: flex;
    overflow: hidden;
    width: 100%;
    position: relative;
    
  }
  .carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
      scroll-snap-type: x mandatory;
 
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch; /* Enables smooth scrolling on iOS */
  }
  .carousel-slide {
    min-width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2rem;
     flex: 0 0 100%;
  scroll-snap-align: start;
  }
  .carousel-image {
    flex: 1;
    max-width: 50%;
  }
  .carousel-content {
    flex: 1;
    text-align: left;
  }
  .carousel-header {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .carousel-buttons {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  .carousel-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
  }
  .carousel-button[disabled] {
    opacity: 0.5;
    cursor: default;
  }
  .carousel-track {
  touch-action: pan-y;
}
</style>

<div class="2up-carousel">
  <div class="carousel-track">
    {% for block in section.blocks %}
      <div class="carousel-slide">
        <img class="carousel-image" src="{{ block.settings.image | image_url: width: 1600 }}" alt="{{ block.settings.heading }}">
        <div class="carousel-content">
          <div class="carousel-header">
            <h2>{{ block.settings.heading }}</h2>
            <div class="carousel-buttons">
              <button class="carousel-button prev" aria-label="Previous slide" style="display: none;">&larr;</button>
              <button class="carousel-button next" aria-label="Next slide">&rarr;</button>
            </div>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const track = document.querySelector('.carousel-track');
    const slides = Array.from(document.querySelectorAll('.carousel-slide'));
    const prevButtons = document.querySelectorAll('.carousel-button.prev');
    const nextButtons = document.querySelectorAll('.carousel-button.next');
    let currentIndex = 0;
    let startX = 0;
    let moveX = 0;
    let isSwiping = false;

    function updateSliderPosition() {
        track.style.transition = 'transform 0.5s ease-in-out';
        track.style.transform = `translateX(-${currentIndex * 100}%)`;
        
        prevButtons.forEach(btn => btn.style.display = currentIndex === 0 ? 'none' : 'block');
        nextButtons.forEach(btn => btn.style.display = currentIndex === slides.length - 1 ? 'none' : 'block');
    }

    prevButtons.forEach(btn => btn.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
            updateSliderPosition();
        }
    }));

    nextButtons.forEach(btn => btn.addEventListener('click', () => {
        if (currentIndex < slides.length - 1) {
            currentIndex++;
            updateSliderPosition();
        }
    }));

    // Touch event listeners for swipe functionality
    track.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        isSwiping = true;
        track.style.transition = 'none';
    });

    track.addEventListener('touchmove', (e) => {
        if (!isSwiping) return;
        moveX = e.touches[0].clientX;
        let diff = startX - moveX;

        // Constrain movement to avoid sliding off-page
        let newTranslate = -currentIndex * 100 - (diff / window.innerWidth) * 100;
        newTranslate = Math.max(-((slides.length - 1) * 100), Math.min(0, newTranslate));

        track.style.transform = `translateX(${newTranslate}%)`;
    });

    track.addEventListener('touchend', () => {
        let diff = startX - moveX;

        // Determine slide change based on swipe distance
        if (diff > 50 && currentIndex < slides.length - 1) {
            currentIndex++;
        } else if (diff < -50 && currentIndex > 0) {
            currentIndex--;
        }

        isSwiping = false;
        updateSliderPosition();
    });

    updateSliderPosition();
});

</script>

{% schema %}
{
  "name": "2UP Slides",
  "tag": "section",
  "class": "section",
  "settings": [],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Slide Image"
        },
        {
          "type": "inline_richtext",
          "id": "heading",
          "label": "Heading"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "2UP Slides",
      "blocks": [
        { "type": "slide" },
        { "type": "slide" }
      ]
    }
  ]
}
{% endschema %}